#!/usr/bin/env node

/**
 * Security Setup Script for WhatsApp Bot
 * 
 * This script helps you set up secure environment variables and
 * ensures your WhatsApp authentication remains intact
 */

const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');

class SecuritySetup {
    constructor() {
        this.projectRoot = process.cwd();
        this.envFile = path.join(this.projectRoot, '.env');
        this.envExampleFile = path.join(this.projectRoot, 'env.example');
    }

    async run() {
        console.log('üîí WhatsApp Bot Security Setup');
        console.log('===============================\n');

        try {
            // Check if .env already exists
            const envExists = await this.checkEnvExists();
            
            if (envExists) {
                console.log('‚úÖ .env file already exists');
                const update = await this.askYesNo('Do you want to update it with new security settings?');
                if (!update) {
                    console.log('Setup cancelled by user');
                    return;
                }
            }

            // Generate secure API key
            const apiKey = this.generateSecureAPIKey();
            console.log(`üîë Generated secure API key: ${apiKey}`);

            // Generate JWT secret
            const jwtSecret = this.generateSecureAPIKey();
            console.log(`üîê Generated JWT secret`);

            // Check WhatsApp auth status
            await this.checkWhatsAppAuth();

            // Create secure .env file
            await this.createSecureEnvFile(apiKey, jwtSecret);

            // Set secure file permissions
            await this.setSecurePermissions();

            // Display setup instructions
            this.displaySetupInstructions(apiKey);

            console.log('\n‚úÖ Security setup completed successfully!');
            console.log('üîÑ Please restart your bot to apply the new security settings.');

        } catch (error) {
            console.error('‚ùå Security setup failed:', error.message);
            process.exit(1);
        }
    }

    async checkEnvExists() {
        try {
            await fs.access(this.envFile);
            return true;
        } catch (error) {
            return false;
        }
    }

    async askYesNo(question) {
        // In a real implementation, you'd use readline for interactive input
        // For now, we'll assume yes for automated setup
        console.log(`${question} (y/n): y`);
        return true;
    }

    generateSecureAPIKey() {
        return crypto.randomBytes(32).toString('hex');
    }

    async checkWhatsAppAuth() {
        const baileysAuthDir = path.join(this.projectRoot, 'src/core/baileys_auth');
        
        try {
            const files = await fs.readdir(baileysAuthDir);
            const hasCredentials = files.includes('creds.json');
            const sessionFiles = files.filter(f => f.startsWith('session-')).length;
            
            console.log(`üì± WhatsApp Authentication Status:`);
            console.log(`   ‚úÖ Credentials: ${hasCredentials ? 'Found' : 'Not found'}`);
            console.log(`   ‚úÖ Sessions: ${sessionFiles} files`);
            
            if (hasCredentials && sessionFiles > 0) {
                console.log(`   üîí WhatsApp auth is intact and will be preserved`);
            } else {
                console.log(`   ‚ö†Ô∏è  WhatsApp auth not found - will be created on first connection`);
            }
            
        } catch (error) {
            console.log(`üì± WhatsApp auth directory not found - will be created on first connection`);
        }
    }

    async createSecureEnvFile(apiKey, jwtSecret) {
        const envContent = `# WhatsApp Bot Security Configuration
# Generated by security-setup.js on ${new Date().toISOString()}

# Security Keys (DO NOT SHARE THESE)
API_SECRET_KEY=${apiKey}
JWT_SECRET=${jwtSecret}
DATABASE_ENCRYPTION_KEY=${this.generateSecureAPIKey()}

# Google Sheets Configuration
GOOGLE_SHEET_ID=${process.env.GOOGLE_SHEET_ID || 'your_google_sheet_id_here'}
# FABRIC_SHEET_ID and COMBINED_SHEET_ID removed - using consolidated sheet

# WhatsApp Configuration
WHATSAPP_ADMIN_PHONE=${process.env.WHATSAPP_ADMIN_PHONE || '1234567890'}
WHATSAPP_BROTHER_PHONE=${process.env.WHATSAPP_BROTHER_PHONE || '1234567890'}
WHATSAPP_ADMIN_PHONE_2=${process.env.WHATSAPP_ADMIN_PHONE_2 || '1234567890'}

# Bot Operation Mode
BOT_MODE=${process.env.BOT_MODE || 'AUTO'}

# Safety Configuration
SAFETY_STARTUP_DELAY=${process.env.SAFETY_STARTUP_DELAY || '240000'}
SAFETY_DAILY_LIMIT=${process.env.SAFETY_DAILY_LIMIT || '10'}
SAFETY_HOURLY_LIMIT=${process.env.SAFETY_HOURLY_LIMIT || '3'}

# Security Settings
LOG_PII_MASKING=true
LOG_RETENTION_DAYS=30
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Shop Information
SHOP_NAME=${process.env.SHOP_NAME || 'RS Tailor & Fabric'}
SHOP_PHONE=${process.env.SHOP_PHONE || '8824781960'}
BUSINESS_HOURS=${process.env.BUSINESS_HOURS || '10:00 AM - 7:00 PM'}

# WhatsApp Authentication (Preserve existing settings)
WHATSAPP_AUTH_MODE=${process.env.WHATSAPP_AUTH_MODE || 'both'}
WHATSAPP_SESSION_PERSISTENCE=true
WHATSAPP_MAX_RECONNECT_ATTEMPTS=10

# Logging
LOG_LEVEL=${process.env.LOG_LEVEL || 'info'}

# Development/Testing
MOCK_WHATSAPP=${process.env.MOCK_WHATSAPP || 'false'}
DISABLE_POLLING=${process.env.DISABLE_POLLING || 'false'}
`;

        await fs.writeFile(this.envFile, envContent, 'utf8');
        console.log('‚úÖ Created secure .env file');
    }

    async setSecurePermissions() {
        try {
            // Set secure permissions on .env file (600 = owner read/write only)
            await fs.chmod(this.envFile, 0o600);
            console.log('‚úÖ Set secure permissions on .env file');
            
            // Set secure permissions on service account file if it exists
            const serviceAccountFile = path.join(this.projectRoot, 'service-account.json');
            try {
                await fs.access(serviceAccountFile);
                await fs.chmod(serviceAccountFile, 0o600);
                console.log('‚úÖ Set secure permissions on service-account.json');
            } catch (error) {
                console.log('‚ÑπÔ∏è  service-account.json not found (using environment variables)');
            }
            
            // Set secure permissions on WhatsApp auth directory
            const baileysAuthDir = path.join(this.projectRoot, 'src/core/baileys_auth');
            try {
                await fs.access(baileysAuthDir);
                await fs.chmod(baileysAuthDir, 0o700);
                console.log('‚úÖ Set secure permissions on WhatsApp auth directory');
            } catch (error) {
                console.log('‚ÑπÔ∏è  WhatsApp auth directory not found');
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è  Failed to set secure permissions:', error.message);
        }
    }

    displaySetupInstructions(apiKey) {
        console.log('\nüìã Security Setup Instructions:');
        console.log('================================');
        
        console.log('\nüîë Your API Key (save this securely):');
        console.log(`   ${apiKey}`);
        
        console.log('\nüìù Next Steps:');
        console.log('1. ‚úÖ Environment variables configured');
        console.log('2. ‚úÖ Secure file permissions set');
        console.log('3. ‚úÖ WhatsApp authentication preserved');
        console.log('4. ‚úÖ PII masking enabled');
        console.log('5. ‚úÖ API authentication enabled');
        
        console.log('\nüîí Security Features Enabled:');
        console.log('‚Ä¢ API key authentication for admin endpoints');
        console.log('‚Ä¢ Rate limiting (100 requests per 15 minutes)');
        console.log('‚Ä¢ PII masking in all logs');
        console.log('‚Ä¢ Secure credential management');
        console.log('‚Ä¢ Atomic state management');
        
        console.log('\nüöÄ Using the API:');
        console.log('‚Ä¢ Include header: X-API-Key: ' + apiKey);
        console.log('‚Ä¢ Or use: Authorization: Bearer ' + apiKey);
        console.log('‚Ä¢ Example: curl -H "X-API-Key: ' + apiKey + '" http://localhost:3001/admin/restart');
        
        console.log('\n‚ö†Ô∏è  Important Security Notes:');
        console.log('‚Ä¢ Never commit the .env file to version control');
        console.log('‚Ä¢ Keep your API key secure and private');
        console.log('‚Ä¢ The service-account.json file is now optional');
        console.log('‚Ä¢ WhatsApp authentication files are preserved');
        
        console.log('\nüîÑ To apply changes:');
        console.log('‚Ä¢ Restart your bot: npm restart');
        console.log('‚Ä¢ Or use PM2: npm run pm2:restart');
    }
}

// Run the security setup
if (require.main === module) {
    const setup = new SecuritySetup();
    setup.run().catch(console.error);
}

module.exports = SecuritySetup;
